import tkinter as tk
import serial

# Function to send data to Arduino when a button is pressed
def send_data(button_value):
    data = custom_data.get(button_value)
    if data:
        arduino.write(data.encode())

# Create a serial connection to the Arduino
try:
    arduino = serial.Serial('COM1', 9600)  # Change 'COM1' to your Arduino's serial port
except serial.SerialException as e:
    print(f"Error: {e}")
    arduino = None

# Create the GUI window
root = tk.Tk()
root.title("Arduino GUI")

# Dictionary to store custom data assignments
custom_data = {}

# Function to create button click event handlers
def button_click_handler(button_value):
    return lambda: send_data(button_value)

# Function to set custom data for a button
def set_custom_data():
    button_value = button_selector.get()
    custom_data_value = custom_data_entry.get()
    custom_data[button_value] = custom_data_value
    custom_data_display.config(text=f"Button {button_value} sends: {custom_data_value}")

# Create five buttons and bind them to the click handlers
for i in range(1, 6):
    button = tk.Button(root, text=f"Button {i}", command=button_click_handler(i))
    button.pack()

# Create a label and Entry widget for custom data assignment
custom_data_label = tk.Label(root, text="Custom Data Assignment:")
custom_data_label.pack()

button_selector_label = tk.Label(root, text="Select Button:")
button_selector_label.pack()

button_selector = tk.Entry(root)
button_selector.pack()

custom_data_entry_label = tk.Label(root, text="Enter Data:")
custom_data_entry_label.pack()

custom_data_entry = tk.Entry(root)
custom_data_entry.pack()

set_custom_data_button = tk.Button(root, text="Set Custom Data", command=set_custom_data)
set_custom_data_button.pack()

custom_data_display = tk.Label(root, text="")
custom_data_display.pack()

# Start the GUI main loop
root.mainloop()

# Close the serial connection when the GUI is closed
if arduino:
    arduino.close()
